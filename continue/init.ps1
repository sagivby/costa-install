param(
    [Parameter(Mandatory=$true)]
    [string]$ApiKey
)

# Set error action preference to stop on any error
$ErrorActionPreference = "Stop"

# --- INPUT VALIDATION ---
if ([string]::IsNullOrWhiteSpace($ApiKey) -or $ApiKey -notmatch '^csai-[a-zA-Z0-9-]+$') {
    Write-Host "‚ùå Missing or invalid API key." -ForegroundColor Red
    Write-Host "Usage: .\script.ps1 -ApiKey <your-api-key>"
    Write-Host "Example: .\script.ps1 -ApiKey csai-ca-abc123def..."
    exit 1
}

# --- CONSTANTS ---
$ConfigPath = Join-Path $env:USERPROFILE ".continue\config.yaml"
$BackupPrefix = Join-Path $env:USERPROFILE ".continue\config.yaml.bak"
$TempFile = [System.IO.Path]::GetTempFileName()
$NewBlockFile = [System.IO.Path]::GetTempFileName()
$AutoStart = "# === AUTO-GENERATED BY COSTA START ==="
$AutoEnd = "# === AUTO-GENERATED BY COSTA END ==="
$RemoteUrl = "https://raw.githubusercontent.com/costa-security/install/refs/heads/main/continue/config.yaml"

# --- CHECK WINDOWS ---
if (-not $IsWindows -and $PSVersionTable.PSVersion.Major -ge 6) {
    if ($PSVersionTable.Platform -ne "Win32NT") {
        Write-Host "üö´ This script is designed for Windows. Exiting." -ForegroundColor Red
        exit 1
    }
}

# --- CHECK CONTINUE INSTALL ---
$ContinueDir = Join-Path $env:USERPROFILE ".continue"
if (-not (Test-Path $ContinueDir)) {
    Write-Host "‚ö†Ô∏è  Continue extension not found!" -ForegroundColor Yellow
    Write-Host "   Please install Continue first:"
    Write-Host "   ‚Ä¢ VS Code: https://marketplace.visualstudio.com/items?itemName=Continue.continue"
    Write-Host "   ‚Ä¢ JetBrains: https://plugins.jetbrains.com/plugin/22707-continue"
    Write-Host ""
    Write-Host "   After installation, restart your editor and try again."
    exit 1
}

try {
    # --- FETCH CONFIG BLOCK ---
    Write-Host "üåê Downloading Costa config block..."
    $RemoteContent = Invoke-WebRequest -Uri $RemoteUrl -UseBasicParsing | Select-Object -ExpandProperty Content

    # Extract the auto-generated block
    $Lines = $RemoteContent -split "`n"
    $InBlock = $false
    $NewBlockLines = @()

    foreach ($Line in $Lines) {
        if ($Line.Trim() -eq $AutoStart) {
            $InBlock = $true
        }
        if ($InBlock) {
            $NewBlockLines += $Line
        }
        if ($Line.Trim() -eq $AutoEnd) {
            $InBlock = $false
        }
    }

    if ($NewBlockLines.Count -eq 0) {
        Write-Host "‚ùå Failed to extract AUTO-GENERATED block from remote config." -ForegroundColor Red
        exit 1
    }

    # Inject API key
    $NewBlock = ($NewBlockLines -join "`n") -replace "REPLACE_WITH_YOUR_API_KEY", $ApiKey

    # Write to temp file
    Set-Content -Path $NewBlockFile -Value $NewBlock -Encoding UTF8

    # --- REPLACE OR INSTALL ---
    if (Test-Path $ConfigPath) {
        $ConfigContent = Get-Content $ConfigPath -Raw
        
        if ($ConfigContent -match [regex]::Escape($AutoStart)) {
            # Replace the auto-generated block
            $Pattern = [regex]::Escape($AutoStart) + ".*?" + [regex]::Escape($AutoEnd)
            $UpdatedContent = $ConfigContent -replace $Pattern, $NewBlock, "Singleline"
            
            Set-Content -Path $ConfigPath -Value $UpdatedContent -Encoding UTF8
            Write-Host "‚úÖ Replaced existing Costa config block in config.yaml" -ForegroundColor Green
        }
        else {
            # Backup and write full new file
            $i = 1
            $Backup = $BackupPrefix
            while (Test-Path $Backup) {
                $i++
                $Backup = "${BackupPrefix}${i}"
            }
            
            Move-Item $ConfigPath $Backup
            Write-Host "üóÉÔ∏è Backed up original config to $(Split-Path $Backup -Leaf)" -ForegroundColor Cyan
            
            Copy-Item $NewBlockFile $ConfigPath
            Write-Host "‚úÖ Installed Costa config as new file" -ForegroundColor Green
        }
    }
    else {
        Copy-Item $NewBlockFile $ConfigPath
        Write-Host "‚úÖ Created new config.yaml with Costa config" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ùå An error occurred: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
finally {
    # --- CLEANUP ---
    if (Test-Path $TempFile) { Remove-Item $TempFile -Force }
    if (Test-Path $NewBlockFile) { Remove-Item $NewBlockFile -Force }
}
